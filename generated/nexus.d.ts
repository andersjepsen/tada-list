/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    uuid<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "UUID";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    uuid<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UUID";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AssignUserToTaskInput: { // input type
    taskId: string; // String!
    userId: string; // String!
  }
  CreateProjectInput: { // input type
    description?: string | null; // String
    title: string; // String!
  }
  CreateSectionInput: { // input type
    projectId: string; // String!
    title: string; // String!
  }
  CreateTaskInput: { // input type
    sectionId: string; // String!
    title: string; // String!
  }
  ProjectInput: { // input type
    description?: string | null; // String
    title?: string | null; // String
  }
  SectionInput: { // input type
    title?: string | null; // String
  }
  TaskInput: { // input type
    done?: boolean | null; // Boolean
    title?: string | null; // String
  }
  UpdateProjectInput: { // input type
    id: string; // String!
    patch: NexusGenInputs['ProjectInput']; // ProjectInput!
  }
  UpdateSectionInput: { // input type
    id: string; // String!
    patch: NexusGenInputs['SectionInput']; // SectionInput!
  }
  UpdateTaskInput: { // input type
    id: string; // String!
    patch: NexusGenInputs['TaskInput']; // TaskInput!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: Date
  EmailAddress: string
  UUID: string
}

export interface NexusGenObjects {
  AssignUserToTaskPayload: { // root type
    task?: NexusGenRootTypes['Task'] | null; // Task
    user?: NexusGenRootTypes['User'] | null; // User
  }
  CreateProjectPayload: { // root type
    project?: NexusGenRootTypes['Project'] | null; // Project
  }
  CreateSectionPayload: { // root type
    section?: NexusGenRootTypes['Section'] | null; // Section
  }
  CreateTaskPayload: { // root type
    task?: NexusGenRootTypes['Task'] | null; // Task
  }
  DeleteProjectPayload: { // root type
    project?: NexusGenRootTypes['Project'] | null; // Project
  }
  DeleteSectionPayload: { // root type
    section?: NexusGenRootTypes['Section'] | null; // Section
  }
  DeleteTaskPayload: { // root type
    task?: NexusGenRootTypes['Task'] | null; // Task
  }
  Mutation: {};
  Project: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Section: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Task: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    done: boolean; // Boolean!
    id: NexusGenScalars['UUID']; // UUID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UpdateProjectPayload: { // root type
    project?: NexusGenRootTypes['Project'] | null; // Project
  }
  UpdateSectionPayload: { // root type
    section?: NexusGenRootTypes['Section'] | null; // Section
  }
  UpdateTaskPayload: { // root type
    task?: NexusGenRootTypes['Task'] | null; // Task
  }
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id: NexusGenScalars['UUID']; // UUID!
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AssignUserToTaskPayload: { // field return type
    task: NexusGenRootTypes['Task'] | null; // Task
    user: NexusGenRootTypes['User'] | null; // User
  }
  CreateProjectPayload: { // field return type
    project: NexusGenRootTypes['Project'] | null; // Project
  }
  CreateSectionPayload: { // field return type
    section: NexusGenRootTypes['Section'] | null; // Section
  }
  CreateTaskPayload: { // field return type
    task: NexusGenRootTypes['Task'] | null; // Task
  }
  DeleteProjectPayload: { // field return type
    project: NexusGenRootTypes['Project'] | null; // Project
  }
  DeleteSectionPayload: { // field return type
    section: NexusGenRootTypes['Section'] | null; // Section
  }
  DeleteTaskPayload: { // field return type
    task: NexusGenRootTypes['Task'] | null; // Task
  }
  Mutation: { // field return type
    assignUserToTask: NexusGenRootTypes['AssignUserToTaskPayload'] | null; // AssignUserToTaskPayload
    createProject: NexusGenRootTypes['CreateProjectPayload'] | null; // CreateProjectPayload
    createSection: NexusGenRootTypes['CreateSectionPayload'] | null; // CreateSectionPayload
    createTask: NexusGenRootTypes['CreateTaskPayload'] | null; // CreateTaskPayload
    deleteProject: NexusGenRootTypes['DeleteProjectPayload'] | null; // DeleteProjectPayload
    deleteSection: NexusGenRootTypes['DeleteSectionPayload'] | null; // DeleteSectionPayload
    deleteTask: NexusGenRootTypes['DeleteTaskPayload'] | null; // DeleteTaskPayload
    updateProject: NexusGenRootTypes['UpdateProjectPayload'] | null; // UpdateProjectPayload
    updateSection: NexusGenRootTypes['UpdateSectionPayload'] | null; // UpdateSectionPayload
    updateTask: NexusGenRootTypes['UpdateTaskPayload'] | null; // UpdateTaskPayload
  }
  Project: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    sections: NexusGenRootTypes['Section'][]; // [Section!]!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  Query: { // field return type
    project: NexusGenRootTypes['Project'] | null; // Project
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    section: NexusGenRootTypes['Section'] | null; // Section
    task: NexusGenRootTypes['Task'] | null; // Task
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  Section: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Task: { // field return type
    assignee: NexusGenRootTypes['User'] | null; // User
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    done: boolean; // Boolean!
    id: NexusGenScalars['UUID']; // UUID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UpdateProjectPayload: { // field return type
    project: NexusGenRootTypes['Project'] | null; // Project
  }
  UpdateSectionPayload: { // field return type
    section: NexusGenRootTypes['Section'] | null; // Section
  }
  UpdateTaskPayload: { // field return type
    task: NexusGenRootTypes['Task'] | null; // Task
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id: NexusGenScalars['UUID']; // UUID!
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AssignUserToTaskPayload: { // field return type name
    task: 'Task'
    user: 'User'
  }
  CreateProjectPayload: { // field return type name
    project: 'Project'
  }
  CreateSectionPayload: { // field return type name
    section: 'Section'
  }
  CreateTaskPayload: { // field return type name
    task: 'Task'
  }
  DeleteProjectPayload: { // field return type name
    project: 'Project'
  }
  DeleteSectionPayload: { // field return type name
    section: 'Section'
  }
  DeleteTaskPayload: { // field return type name
    task: 'Task'
  }
  Mutation: { // field return type name
    assignUserToTask: 'AssignUserToTaskPayload'
    createProject: 'CreateProjectPayload'
    createSection: 'CreateSectionPayload'
    createTask: 'CreateTaskPayload'
    deleteProject: 'DeleteProjectPayload'
    deleteSection: 'DeleteSectionPayload'
    deleteTask: 'DeleteTaskPayload'
    updateProject: 'UpdateProjectPayload'
    updateSection: 'UpdateSectionPayload'
    updateTask: 'UpdateTaskPayload'
  }
  Project: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'UUID'
    sections: 'Section'
    title: 'String'
    updatedAt: 'DateTime'
    users: 'User'
  }
  Query: { // field return type name
    project: 'Project'
    projects: 'Project'
    section: 'Section'
    task: 'Task'
    user: 'User'
    users: 'User'
  }
  Section: { // field return type name
    createdAt: 'DateTime'
    id: 'UUID'
    tasks: 'Task'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Task: { // field return type name
    assignee: 'User'
    createdAt: 'DateTime'
    done: 'Boolean'
    id: 'UUID'
    title: 'String'
    updatedAt: 'DateTime'
  }
  UpdateProjectPayload: { // field return type name
    project: 'Project'
  }
  UpdateSectionPayload: { // field return type name
    section: 'Section'
  }
  UpdateTaskPayload: { // field return type name
    task: 'Task'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'EmailAddress'
    id: 'UUID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    assignUserToTask: { // args
      input: NexusGenInputs['AssignUserToTaskInput']; // AssignUserToTaskInput!
    }
    createProject: { // args
      input: NexusGenInputs['CreateProjectInput']; // CreateProjectInput!
    }
    createSection: { // args
      input: NexusGenInputs['CreateSectionInput']; // CreateSectionInput!
    }
    createTask: { // args
      input: NexusGenInputs['CreateTaskInput']; // CreateTaskInput!
    }
    deleteProject: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    deleteSection: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    deleteTask: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    updateProject: { // args
      input: NexusGenInputs['UpdateProjectInput']; // UpdateProjectInput!
    }
    updateSection: { // args
      input: NexusGenInputs['UpdateSectionInput']; // UpdateSectionInput!
    }
    updateTask: { // args
      input: NexusGenInputs['UpdateTaskInput']; // UpdateTaskInput!
    }
  }
  Query: {
    project: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    section: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    task: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    user: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}