### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AssignUserToTaskInput {
  taskId: String!
  userId: String!
}

type AssignUserToTaskPayload {
  task: Task
  user: User
}

input CreateProjectInput {
  description: String
  title: String!
}

type CreateProjectPayload {
  project: Project
}

input CreateSectionInput {
  projectId: String!
  title: String!
}

type CreateSectionPayload {
  section: Section
}

input CreateTaskInput {
  sectionId: String!
  title: String!
}

type CreateTaskPayload {
  task: Task
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DeleteProjectPayload {
  project: Project
}

type DeleteSectionPayload {
  section: Section
}

type DeleteTaskPayload {
  task: Task
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type Mutation {
  assignUserToTask(input: AssignUserToTaskInput!): AssignUserToTaskPayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  createSection(input: CreateSectionInput!): CreateSectionPayload
  createTask(input: CreateTaskInput!): CreateTaskPayload
  deleteProject(id: UUID!): DeleteProjectPayload
  deleteSection(id: UUID!): DeleteSectionPayload
  deleteTask(id: UUID!): DeleteTaskPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateSection(input: UpdateSectionInput!): UpdateSectionPayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
}

type Project {
  createdAt: DateTime!
  description: String
  id: UUID!
  sections: [Section!]!
  title: String!
  updatedAt: DateTime!
  users: [User]!
}

input ProjectInput {
  description: String
  title: String
}

type Query {
  project(id: UUID!): Project
  projects: [Project!]!
  section(id: UUID!): Section
  task(id: UUID!): Task
  user(id: UUID!): User
  users: [User]!
}

type Section {
  createdAt: DateTime!
  id: UUID!
  tasks: [Task!]!
  title: String!
  updatedAt: DateTime!
}

input SectionInput {
  title: String
}

type Task {
  assignee: User
  createdAt: DateTime!
  done: Boolean!
  id: UUID!
  title: String!
  updatedAt: DateTime!
}

input TaskInput {
  done: Boolean
  title: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UpdateProjectInput {
  id: String!
  patch: ProjectInput!
}

type UpdateProjectPayload {
  project: Project
}

input UpdateSectionInput {
  id: String!
  patch: SectionInput!
}

type UpdateSectionPayload {
  section: Section
}

input UpdateTaskInput {
  id: String!
  patch: TaskInput!
}

type UpdateTaskPayload {
  task: Task
}

type User {
  createdAt: DateTime
  email: EmailAddress
  id: UUID!
  name: String
}
